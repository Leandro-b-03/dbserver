################################################################################
# Copyright 2019 spriteCloud B.V. All rights reserved.
# Generated by LapisLazuli, version 2.1.4
# Author: "Leandro Bezerra" <>
require 'selenium-webdriver'
require 'allure-cucumber'
require 'open3'
require 'lapis_lazuli'
require 'lapis_lazuli/cucumber'

################################################################################
# Start the logger
$log = Logger.new('logs/selenium.log')
# Selenium::WebDriver.logger.level = :info

World(LapisLazuli)

# Firefox
firefoxdriver_path = 'browsers/geckodriver'
raise "Cannot found FirefoxDriver on #{firefoxdriver_path}" if !File.file?(firefoxdriver_path)
Selenium::WebDriver::Firefox::Service.driver_path = firefoxdriver_path

# Chrome
chromedriver_path = 'browsers/chromedriver'
raise "Cannot found ChromeDriver on #{chromedriver_path}" if !File.file?(chromedriver_path)
Selenium::WebDriver::Chrome::Service.driver_path = chromedriver_path

################################################################################
# Get all names correctly into report
class Cucumber::Core::Test::Step
  def name
    return text if self.text == 'Before hook'
    return text if self.text == 'After hook'
    return text if self.text == 'AfterStep hook'
    "#{source.last.keyword}#{text}"
  end 
end

################################################################################
# Report configuration
if ENV['LOGREPORT']
  include AllureCucumber::DSL
end

################################################################################
# Gem Allure Cucumber
AllureCucumber.configure do |c|
  c.clean_dir  = false
  c.output_dir = "allure/output/"
  DEFAULT_TMS_PREFIX      = '@TMS:'
  DEFAULT_ISSUE_PREFIX    = '@ISSUE:'
  DEFAULT_SEVERITY_PREFIX = '@SEVERITY:'
end

# Do something when LapisLazuli is started (This is before the browser is opened)
LapisLazuli.Start do
  #Hub for start the test on a browser
  url = "http://hub:4444/wd/hub"

  options = nil

  #If BROWSER is NIL, Lapis Lazuli will default to Firefox
  if ENV['BROWSER'] == 'firefox'

    # Get Selenium to create a profile object
    profile = Selenium::WebDriver::Firefox::Profile.new

    # These settings prevent a warning after authenticating via URL
    # For example user:pass@https://website.com/
    profile['network.http.phishy-userpass-length'] = 255
    profile['network.http.use-cache'] = false

    options = Selenium::WebDriver::Firefox::Options.new
    options.profile = profile
  end

  # Start the browser with these settings
  browser ENV['BROWSER'].to_sym, headless: true, option: options, url: url

  if (ENV['FULLSCREEN'] == "true")
    browser.driver.manage.window.maximize
  end
end

at_exit do
  @report = "allure generate allure --output results --clean"
  Open3.popen3(@report) do |stdin, stdout, stderr, wait_thr|
    while line = stdout.gets
      puts line
    end
    
    stdin.close # we pass everything via command-line, so close child's stdin at once
    still_open = [stdout, stderr]  # Array that only contains the opened streams
  end
end